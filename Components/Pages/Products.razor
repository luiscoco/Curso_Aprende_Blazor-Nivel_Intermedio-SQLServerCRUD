@page "/products"
@inject ProductService ProductService

<h3>Product List</h3>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.ProductName</td>
                    <td>@product.Price</td>
                    <td>@product.Quantity</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditProduct(product.ProductId)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteProduct(product.ProductId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-success" @onclick="AddProduct">Add New Product</button>

    @if (selectedProduct != null)
    {
        <EditForm Model="@selectedProduct" OnValidSubmit="SaveProduct">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="ProductName">Product Name</label>
                <InputText id="ProductName" @bind-Value="selectedProduct.ProductName" class="form-control" />
            </div>
            <div class="form-group">
                <label for="Price">Price</label>
                <InputNumber id="Price" @bind-Value="selectedProduct.Price" class="form-control" />
            </div>
            <div class="form-group">
                <label for="Quantity">Quantity</label>
                <InputNumber id="Quantity" @bind-Value="selectedProduct.Quantity" class="form-control" />
            </div>
            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
    }
}

@code {
    private List<Product> products;
    private Product selectedProduct = new Product();

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProductsAsync();
    }

    private void AddProduct()
    {
        selectedProduct = new Product();
    }

    private async Task SaveProduct()
    {
        if (selectedProduct.ProductId == 0)
        {
            await ProductService.AddProductAsync(selectedProduct);
        }
        else
        {
            await ProductService.UpdateProductAsync(selectedProduct);
        }

        products = await ProductService.GetProductsAsync();
        selectedProduct = null;
    }

    private async void EditProduct(int id)
    {
        selectedProduct = await ProductService.GetProductByIdAsync(id);
    }

    private async void DeleteProduct(int id)
    {
        await ProductService.DeleteProductAsync(id);
        products = await ProductService.GetProductsAsync();
    }
}
